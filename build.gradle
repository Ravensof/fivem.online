buildscript {
	ext.kotlin_version = '1.3.11'
}

plugins {
	id 'kotlin2js' version '1.3.11'
	id 'kotlinx-serialization' version '1.3.0'
}

group 'online.fivem'
version '1.0-SNAPSHOT'

repositories {
	mavenCentral()
	maven { url "https://kotlin.bintray.com/kotlinx" }
}

dependencies {
}

subprojects {

	group 'online.fivem'

	repositories {
		mavenCentral()
		jcenter()
		// artifacts are published to this repository
		maven { url "https://kotlin.bintray.com/kotlinx" }
		maven { url "http://dl.bintray.com/kotlin/kotlinx.html/" }
		maven { url "https://kotlin.bintray.com/js-externals" }

	}

	buildscript {
		ext.web_path = 'web'
		ext.serverDir = 'P:\\2018.08.23_30120\\resources\\fivem-online1\\' + getProject().name
		ext.localDir = 'F:\\testFivem\\' + getProject().name

		repositories {
			mavenCentral()
			jcenter()
		}

		dependencies {
			classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
			classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
		}
	}

	apply plugin: 'kotlin2js'
	apply plugin: 'kotlinx-serialization'
    apply plugin: "kotlin-platform-js"
//    apply plugin: 'kotlin-dce-js'

	compileKotlin2Js {
		kotlinOptions.moduleKind = "umd"
		kotlinOptions.sourceMap = true
	}

	configurations {
		compile {
			transitive = false
		}
	}

	dependencies {

		compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
//		testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
		compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.9.0"
		compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.0.1'
		
		switch (getProject().name) {
			case "common":
				break
			case "nui":
				implementation 'org.jetbrains.kotlinx:kotlinx-html-common:0.6.11'
				compile 'org.jetbrains.kotlinx:kotlinx-html-js:0.6.1'
				compile "kotlin.js.externals:kotlin-js-jquery:3.2.0-0"

				break
			default:

				break
		}
	}

	task assembleWeb(type: Sync) {
		configurations.compile.each { File file ->
			from(zipTree(file.absolutePath), {
				includeEmptyDirs = false
				include { fileTreeElement ->
					def path = fileTreeElement.path
					(path.endsWith(".js") || path.endsWith(".js.map")) && (path.startsWith("META-INF/resources/") ||
							!path.startsWith("META-INF/"))
				}
			})
		}

		from compileKotlin2Js.destinationDir
		into "${buildDir}/lib"

		dependsOn classes
	}

	assemble.dependsOn assembleWeb

	task cleanServerCopy(type: Delete) {
		delete serverDir + '\\lib'
		delete serverDir + '\\resources'
		followSymlinks = true
	}

	task cleanLocalCopy(type: Delete) {
		delete localDir + '\\lib'
		delete localDir + '\\resources'
		followSymlinks = true
	}

	task copyToLocal(type: Copy) {
		dependsOn cleanLocalCopy

		from(buildDir) {
			include 'lib/**'
			include 'resources/**'
		}
		into localDir
	}

	task copyToServer(type: Copy) {
		dependsOn cleanServerCopy

		from(buildDir) {
			include 'lib/**.js'
			exclude 'lib/**.meta.js'
			include 'resources/**'
		}

		into serverDir
	}

	task fullBuildAndCopy {
		dependsOn assemble
		dependsOn copyToServer
		dependsOn copyToLocal
	}

	task fastBuildAndDeploy {
		dependsOn assemble
		dependsOn copyToServer
	}
}